---
description: 
globs: 
alwaysApply: false
---
# Git 브랜치 전략: Vocaman 프로젝트

이 문서는 Vocaman 프론트엔드(VocaHang) 및 백엔드(vocaman_backend) 프로젝트에 공통으로 적용되는 Git 브랜치 전략을 정의합니다. 일관된 브랜치 운영을 통해 협업 효율성을 높이고 안정적인 버전 관리를 목표로 합니다.

## 주요 브랜치

*   **`main`**:
    *   프로덕션 환경에 배포되는 가장 안정적인 버전의 코드를 관리하는 브랜치입니다.
    *   오직 `release` 브랜치 또는 `hotfix` 브랜치로부터의 병합(merge)만 허용됩니다.
    *   이 브랜치에 직접적인 커밋(commit)은 금지됩니다.
    *   프론트엔드의 경우, 현재 1차 MVP 개발 버전이 이 브랜치에 배포된 상태입니다.

*   **`develop` (또는 `dev`)**:
    *   다음 릴리스를 위한 개발이 진행되는 메인 개발 브랜치입니다.
    *   모든 `feature` 브랜치는 개발 완료 후 이 브랜치로 병합됩니다.
    *   스테이징(Staging) 환경 배포의 기반이 되며, 상대적으로 안정적인 상태를 유지하려고 노력합니다.
    *   일상적인 개발 작업은 이 브랜치에서 시작된 `feature` 브랜치에서 진행합니다.

*   **`feature/<feature-name>`**:
    *   새로운 기능 개발, 기존 기능 개선, 리팩토링 등 개별 작업을 위한 브랜치입니다.
    *   항상 `develop` 브랜치에서 분기(branch out)합니다.
    *   브랜치 이름은 개발하는 기능이나 작업을 명확히 알 수 있도록 작성합니다. (예: `feature/google-login`, `feature/update-word-list-ui`)
    *   개발 완료 후, 충분한 테스트를 거쳐 코드 리뷰와 함께 `develop` 브랜치로 Pull Request (또는 Merge Request)를 통해 병합합니다.
    *   병합 후에는 일반적으로 해당 `feature` 브랜치를 삭제합니다.

*   **`release/<version>` (선택 사항, 권장)**:
    *   프로덕션 릴리스를 준비하기 위한 브랜치입니다.
    *   `develop` 브랜치에서 분기하며, 버전 번호(예: `release/v1.1.0`)를 이름으로 사용합니다.
    *   이 브랜치에서는 주로 버그 수정, 최종 테스트, 문서화 작업, 버전 정보 업데이트 등 릴리스에 직접적으로 관련된 작업만 수행합니다. 새로운 기능 개발은 허용되지 않습니다.
    *   릴리스 준비가 완료되면, `main` 브랜치와 `develop` 브랜치 양쪽으로 병합합니다.
    *   `main` 브랜치에 병합 후에는 해당 커밋에 버전 태그(예: `v1.1.0`)를 생성합니다.

*   **`hotfix/<hotfix-name>` (선택 사항, 필요시)**:
    *   이미 프로덕션(`main` 브랜치)에 배포된 버전에서 발생한 긴급한 버그를 수정하기 위한 브랜치입니다.
    *   반드시 `main` 브랜치에서 직접 분기합니다.
    *   최소한의 필요한 수정 작업만 진행합니다.
    *   수정 완료 후, `main` 브랜치와 `develop` 브랜치 (그리고 진행 중인 `release` 브랜치가 있다면 해당 브랜치에도) 병합합니다.
    *   `main` 브랜치에 병합 후에는 새로운 패치 버전 태그(예: `v1.0.1`)를 생성할 수 있습니다.

## 브랜치 운영 일반 규칙

*   커밋 메시지는 명확하고 의미 있게 작성합니다. (팀 내 컨벤션 설정 권장)
*   Pull Request (PR) 또는 Merge Request (MR) 생성 시, 변경 사항에 대한 충분한 설명을 제공하고 코드 리뷰를 거칩니다.
*   주기적으로 `develop` 브랜치의 최신 변경 사항을 각자의 `feature` 브랜치로 가져와(rebase 또는 merge) 충돌을 최소화합니다.

## Cursor AI 협업 가이드라인

*   AI에게 브랜치 전략과 관련된 질문을 하거나, 특정 브랜치에 대한 작업을 지시할 때 본 `git-branching-strategy.mdc` 문서를 참고하도록 안내할 수 있습니다.
*   예시: "새로운 기능 개발을 시작하려고 하는데, `@VocaHang/.cursor/rules/git-branching-strategy.mdc` 에 따라 어떤 브랜치에서 시작해야 할까?"
*   **전체 프로젝트 공통 규칙 및 아키텍처는 `Vocaman/PROJECT_COMMON_RULES.mdc` 및 `Vocaman/.cursor/rules/project-architecture-overview.mdc`를 우선적으로 참고해야 합니다.**
