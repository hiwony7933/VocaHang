---
description:
globs:
alwaysApply: false
---
# 프론트엔드 테스트 전략: VocaHang

이 문서는 VocaHang (보카맨 프론트엔드) 프로젝트의 테스트 전략을 정의합니다. 다양한 테스트 유형을 통해 애플리케이션의 안정성과 품질을 확보하는 것을 목표로 합니다.

## 1. 단위 테스트 (Unit Tests)

*   **목표**: React 컴포넌트, 커스텀 훅, 유틸리티 함수, 상태 관리 로직(`GameProvider.tsx` 내 함수 등) 등 코드의 가장 작은 단위가 예상대로 정확하게 동작하는지 검증합니다.
*   **도구**:
    *   **Jest**: JavaScript 테스트 프레임워크. 테스트 실행, 단언(assertions), 모킹(mocking) 기능 제공.
    *   **React Testing Library (RTL)**: 사용자의 관점에서 컴포넌트를 테스트하도록 돕는 라이브러리. 실제 DOM 노드와 상호작용하는 방식으로 테스트 작성 유도.
*   **주요 테스트 대상**:
    *   **컴포넌트**:
        *   정상적인 렌더링 (props에 따른 UI 변화 포함).
        *   사용자 인터랙션 (클릭, 입력 등)에 따른 올바른 동작 및 상태 변경.
        *   조건부 렌더링 로직.
    *   **커스텀 훅**: 훅 내부 로직의 정확성 및 반환 값 검증.
    *   **유틸리티 함수**: 입력에 따른 정확한 출력 값 반환.
    *   **상태 관리자 (`GameProvider.tsx` 등)**: 상태 변경 액션 호출 시 예상되는 상태 변화 및 부수 효과 검증.
*   **실행 시점**:
    *   코드 변경 시 로컬 환경에서 수시로 실행.
    *   Git 커밋 전 (Husky + lint-staged를 통해 자동 실행 권장).
    *   CI (Continuous Integration) 파이프라인 실행 시 자동 실행.

## 2. 통합 테스트 (Integration Tests)

*   **목표**: 여러 컴포넌트나 모듈이 결합되어 함께 작동하는 방식을 검증합니다. 특정 기능 흐름이 올바르게 동작하는지 확인합니다.
*   **도구**: Jest, React Testing Library (RTL).
*   **주요 테스트 대상**:
    *   **화면 단위 기능 흐름**: 특정 화면 내에서 여러 컴포넌트가 상호작용하며 완성되는 기능 (예: 단어 스펠링 입력 후 정답/오답 처리 및 결과 표시까지의 흐름).
    *   **네비게이션**: 화면 간 전환 로직, 파라미터 전달 등.
    *   **API 연동**: 실제 API를 모킹(mocking)하여, API 호출 및 응답 처리가 올바르게 이루어지는지 검증. (예: 단어 목록 가져오기, 게임 결과 전송)
*   **실행 시점**:
    *   `feature` 브랜치를 `develop` 브랜치로 병합하기 전.
    *   CI 파이프라인 실행 시 자동 실행.

## 3. E2E (End-to-End) 테스트 (선택 사항, 권장)

*   **목표**: 실제 사용자의 시나리오를 모방하여 애플리케이션 전체의 흐름을 처음부터 끝까지 검증합니다. 사용자가 경험하게 될 전체적인 기능의 안정성을 보장합니다.
*   **도구**:
    *   **Detox**: React Native 애플리케이션을 위한 Gray box E2E 테스트 및 자동화 라이브러리. 실제 디바이스 또는 시뮬레이터/에뮬레이터에서 테스트 실행.
    *   **Cypress**: 웹 애플리케이션 E2E 테스트에 주로 사용되지만, Expo 웹 빌드에 대해 고려해볼 수 있습니다.
*   **주요 테스트 대상**:
    *   핵심 사용자 플로우 (예: 앱 실행 -> 인트로 화면 -> 게임 방법 확인 -> 게임 시작 -> 단어 맞추기 -> 결과 확인 -> 대시보드 확인 -> 설정 변경).
    *   회원가입, 로그인 등 인증 관련 플로우.
*   **실행 시점**:
    *   스테이징(Staging) 환경 배포 후.
    *   프로덕션(Production) 배포 전.
    *   주기적으로 자동 실행 (예: 매일 밤).

## 4. API 계약 테스트 (Contract Tests) (고려 사항)

*   **목표**: 프론트엔드가 기대하는 API 요청/응답 형식과 백엔드가 제공하는 API 명세가 일치하는지 검증합니다. 이를 통해 프론트엔드와 백엔드 간의 통합 오류를 조기에 발견할 수 있습니다.
*   **도구**: Pact.
*   **진행 방식**:
    *   프론트엔드(Consumer)는 기대하는 API 요청/응답 구조를 정의한 계약(contract) 파일 생성.
    *   백엔드(Provider)는 이 계약 파일을 기준으로 자신의 API가 계약을 만족하는지 검증.
*   **이점**:
    *   프론트엔드와 백엔드 팀이 독립적으로 개발 및 테스트를 진행하면서도, 통합 시 발생할 수 있는 호환성 문제를 줄일 수 있습니다.
    *   API 변경 시 관련된 부분을 명확히 파악하고 대응할 수 있습니다.

## 일반 가이드라인

*   테스트 코드는 실제 코드만큼 중요하게 관리하며, 가독성 있고 유지보수하기 쉽게 작성합니다.
*   테스트 커버리지를 점진적으로 높여나가는 것을 목표로 합니다.
*   새로운 기능 추가 또는 버그 수정 시 반드시 관련 테스트 코드를 작성하거나 업데이트합니다.
*   CI 환경에서 모든 테스트가 통과되어야 다음 단계(빌드, 배포 등)로 진행될 수 있도록 설정합니다.
